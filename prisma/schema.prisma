// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  editor
  admin
}

model User {
  id Int @id @default(autoincrement())

  email String @unique
  name  String

  hash      String
  createdAt DateTime @default(now())

  firstName   String?
  lastName    String?
  fullname    String?
  phone       String?
  address     String?
  city        String?
  gender      String?
  dateOfBirth DateTime?
  height      Int?
  weight      Int?

  bookmarks Bookmark[]
  isActive  Boolean    @default(false)

  role     Role      @default(user)
  customer Customer?

  @@unique([firstName, lastName])
  @@map("users")

}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  title       String
  description String?
  link        String

  userID Int
  user   User @relation(fields: [userID], references: [id])

  @@map("bookmarks")
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
}

model Customer {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())

  // Reuse fields from User model
  email       String    @unique
  nickName    String?
  firstName   String?
  lastName    String?
  fullname    String?
  phone       String?
  address     String?
  city        String?
  gender      String?
  dateOfBirth DateTime?
  height      Int?
  weight      Int?

  @@map("customers")
}



model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  SKU         String?
  originPrice Float? 
  createdAt   DateTime @default(now())
  imageUrl    String?
  rating      Float?

  // TODO: check điều kiện category hiện tại ko có children thì mới cho.
  category        Category? @relation(fields: [category_id], references: [id])
  category_id     Int?

  variations   ProductVariation[]
  images       ProductImage[]

  @@map("products")
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String @unique
  description String?
  parent_id Int?
  parent  Category?   @relation("ParentCategory", fields: [parent_id], references: [id])
  children  Category[]  @relation("ParentCategory")

  products          Product[]

  @@map("categories")
}
model ProductVariation {
  id           Int      @id @default(autoincrement())
  color        String   @db.VarChar(50)
  size         String   @db.VarChar(50)
  quantity     Int      @default(0)
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @updatedAt
  // TODO:  cân nhắc xem có nên lấy giá trị default từ product.
  price Float
  variationImages ProductImage[]

  
  @@unique([productId, color, size])
}

model ProductImage {
  id           Int               @id @default(autoincrement())
  url          String
  productId    Int?
  product      Product?          @relation(fields: [productId], references: [id])
  variationId  Int?
  variation   ProductVariation?  @relation(fields: [variationId], references: [id])
}